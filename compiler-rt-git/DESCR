The compiler-rt project consists of:

 - builtins - a simple library that provides an implementation of the low-level
   target-specific hooks required by code generation and other runtime
   components. For example, when compiling for a 32-bit target, converting a
   double to a 64-bit unsigned integer is compiling into a runtime call to the
   "__fixunsdfdi" function. The builtins library provides optimized
   implementations of this and other low-level routines, either in
   target-independent C form, or as a heavily-optimized assembly.

   builtins provides full support for the libgcc interfaces on supported
   targets and high performance hand tuned implementations of commonly used
   functions like __floatundidf in assembly that are dramatically faster than
   the libgcc implementations. It should be very easy to bring builtins to
   support a new target by adding the new routines needed by that target.

 - sanitizer runtimes - runtime libraries that are required to run the code
   with sanitizer instrumentation. This includes runtimes for:
   *     AddressSanitizer
   *     ThreadSanitizer
   *     UndefinedBehaviorSanitizer
   *     MemorySanitizer
   *     LeakSanitizer
   *     DataFlowSanitizer

 - profile - library which is used to collect coverage information.

 - BlocksRuntime - a target-independent implementation of Apple "Blocks"
   runtime interfaces.
