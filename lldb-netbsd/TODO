Debugging to a file:
    log enable -STagnpstv -f /tmp/log.txt lldb all

Debugging GDB remote protocol commands:
    log enable gdb-remote packets

    https://sourceware.org/gdb/onlinedocs/gdb/Remote-Protocol.html

Debugging with gdb(1):
    Start the server:
        gdb --args lldb-server g *:1234 -- ./signal

    Start the client:
        lldb
    Inside it:
        process connect connect://localhost:1234


Introduce objc++ setup with gcc(1) for "make test":
    Build Command Output:
    g++: error trying to exec 'cc1objplus': execvp: No such file or directory
    g++: error trying to exec 'cc1objplus': execvp: No such file or directory
    gmake[4]: *** [main.o] Error 1

To be done
==========
 - breakpoint support (amd64)
 - FPR registers' accessors (amd64)
 - debug registers support (amd64)
 - Host::LaunchProcessPosixSpawn verify ::posix_spawnattr_setsigdefault on NetBSD
 - single step support
 - thread resume/suspend operation
 - i386 support
 - upstream NetBSD support
 - adapt upstream Python tests to run on NetBSD and pass as many of them as
   possible
 - import LLDB into base
 - add NetBSD specific ATF tests verifying fundamental functionality of LLDB
 - support F_GETPATH path in source/Host/common/File.cpp

and of course fix as many bugs as possible
