$Id: DESC,v 1.7 2009/11/09 03:00:07 schnoebe Exp $

Please provide .mk files descriptions and reasons for existence of those
files here.

linuxbin.pkg.mk	- generalised .mk file for installing Linux binary packages,
		  for various architectures, no matter - deb or rpm.
		  Introduced by Michal Pasternak <dotz@irc.pl>
		  
		  Why:
		  - pkgsrc contains many packages, that use RPM files
		  - current emul/suse_linux/ layer provided by Makefile.common
		    is no good (can't override path for RPMFILES, for example)
		  - could be used by emul/linux base packages as well


win32.pkg.mk	- this is winpkgsrc base makefile; it is a base of all
		  packages, that are cross-compiled with mingw32. Do not
		  use it with normal packages by any means.


rcd.mk          - this file is intended to determine if build system
		  have an rc.d framework, or not. In case if there
		  is no such one, it will be installed from pkgsrc
		  by dependency.


postgresql.mk	- improvement for current postgresql-* packages; should reside
		  in databases/postgresql/ directory and not mk.


haskell.mk - generalised .mk file for Haskell Cabal packages.

           Why:
           - Cabal packages use their own build system named Cabal, so
             it needs specialised targets like do-configure, do-build
             and do-install.
           - Cabal packages needs to be "registered" after
             installation, and "unregistered" after
             uninstallation. Look how wip/cabal/INSTALL handles this:
             it should really be automated.

git-package.mk   -  retrieve sources from git repositories, much like
		    svn-package.mk and cvs-package.mk handle SVN and CVS
		    repositories. 

yesno.mk - Standardizes how to specify boolean values in Makefiles, both
   internally and in individual package Makefiles. Makes "yes" and "no"
   universal and actual first-class words (there's nothing special about
   them otherwise).  Eliminates subtle inconsistencies (does this variable
   support "YES" uppercase or not?) and significantly DRYs up code.

fonts.mk - Standardizes where fonts are installed. Avoids needless
duplication across all the Makefiles for font packages.
